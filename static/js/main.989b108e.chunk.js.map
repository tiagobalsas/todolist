{"version":3,"sources":["Form.js","Table.js","App.js","index.js"],"names":["Form","initialState","name","job","state","handleChange","target","value","setState","submitForm","props","handleSubmit","this","htmlFor","type","id","onChange","onClick","Component","TableHeader","TableBody","rows","characterData","map","row","index","removeCharacter","Table","App","characters","filter","character","indice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAiDeA,E,4MA9CbC,aAAe,CACbC,KAAM,GACNC,IAAK,I,EAGPC,MAAQ,EAAKH,a,EAEbI,aAAe,YAAiB,IAAdC,EAAa,EAAbA,OACRJ,EAAgBI,EAAhBJ,KAAMK,EAAUD,EAAVC,MAEd,EAAKC,SAAL,eACGN,EAAOK,K,EAIZE,WAAa,WACX,EAAKC,MAAMC,aAAa,EAAKP,OAC7B,EAAKI,SAAS,EAAKP,e,4CAGrB,WACE,MAAsBW,KAAKR,MAAnBF,EAAR,EAAQA,KAAMC,EAAd,EAAcA,IACd,OACE,iCACE,uBAAOU,QAAQ,OAAf,kBACA,uBACEC,KAAK,OACLZ,KAAK,OACLa,GAAG,OACHR,MAAOL,EACPc,SAAUJ,KAAKP,eAEjB,uBAAOQ,QAAQ,MAAf,iBACA,uBACEC,KAAK,OACLZ,KAAK,MACLa,GAAG,MACHR,MAAOJ,EACPa,SAAUJ,KAAKP,eAEjB,uBAAOS,KAAK,SAASP,MAAM,SAASU,QAASL,KAAKH,oB,GAzCvCS,aCAbC,EAAc,WAClB,OACE,gCACE,+BACE,sCACA,2CAMFC,EAAY,SAACV,GACjB,IAAMW,EAAOX,EAAMY,cAAcC,KAAI,SAACC,EAAKC,GACzC,OACE,+BACE,mCAAMD,EAAItB,KAAV,OACA,mCAAMsB,EAAIrB,IAAV,OACA,6BACE,wBAAQc,QAAS,kBAAMP,EAAMgB,gBAAgBD,IAA7C,wBAJKA,MASb,OAAO,sCAASJ,EAAT,QAiBMM,EAdD,SAACjB,GACb,IAAQY,EAAmCZ,EAAnCY,cAAeI,EAAoBhB,EAApBgB,gBAEvB,OACE,kCACE,cAAC,EAAD,IACA,cAAC,EAAD,CACEJ,cAAeA,EACfI,gBAAiBA,QCCVE,E,4MAhCbxB,MAAQ,CACNyB,WAAY,I,EAGdH,gBAAkB,SAACD,GACjB,IAAQI,EAAe,EAAKzB,MAApByB,WAER,EAAKrB,SAAS,CACZqB,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GACxC,OAAOA,IAAWP,Q,EAKxBd,aAAe,SAACoB,GACd,EAAKvB,SAAS,CAAEqB,WAAW,GAAD,mBAAM,EAAKzB,MAAMyB,YAAjB,CAA6BE,O,4CAGzD,WACE,IAAQF,EAAejB,KAAKR,MAApByB,WACR,OACE,gCACE,cAAC,EAAD,CACEP,cAAeO,EACfH,gBAAiBd,KAAKc,kBAExB,cAAC,EAAD,CAAMf,aAAcC,KAAKD,sB,GA3BfO,a,MCClBe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.989b108e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Form extends Component {\n  initialState = {\n    name: '',\n    job: '',\n  };\n\n  state = this.initialState;\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  submitForm = () => {\n    this.props.handleSubmit(this.state);\n    this.setState(this.initialState);\n  };\n\n  render() {\n    const { name, job } = this.state;\n    return (\n      <form>\n        <label htmlFor='name'>Name</label>\n        <input\n          type='text'\n          name='name'\n          id='name'\n          value={name}\n          onChange={this.handleChange}\n        />\n        <label htmlFor='job'>Job</label>\n        <input\n          type='text'\n          name='job'\n          id='job'\n          value={job}\n          onChange={this.handleChange}\n        />\n        <input type='button' value='Submit' onClick={this.submitForm} />\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React from 'react';\n\nconst TableHeader = () => {\n  return (\n    <thead>\n      <tr>\n        <th>Nome</th>\n        <th>Job</th>\n      </tr>\n    </thead>\n  );\n};\n\nconst TableBody = (props) => {\n  const rows = props.characterData.map((row, index) => {\n    return (\n      <tr key={index}>\n        <td> {row.name} </td>\n        <td> {row.job} </td>\n        <td>\n          <button onClick={() => props.removeCharacter(index)}>Delete</button>\n        </td>\n      </tr>\n    );\n  });\n  return <tbody> {rows} </tbody>;\n};\n\nconst Table = (props) => {\n  const { characterData, removeCharacter } = props;\n\n  return (\n    <table>\n      <TableHeader />\n      <TableBody\n        characterData={characterData}\n        removeCharacter={removeCharacter}\n      />\n    </table>\n  );\n};\n\nexport default Table;\n","import React, { Component } from 'react';\nimport Form from './Form';\nimport Table from './Table';\n\nclass App extends Component {\n  state = {\n    characters: [],\n  };\n\n  removeCharacter = (index) => {\n    const { characters } = this.state;\n\n    this.setState({\n      characters: characters.filter((character, indice) => {\n        return indice !== index;\n      }),\n    });\n  };\n\n  handleSubmit = (character) => {\n    this.setState({ characters: [...this.state.characters, character] });\n  };\n\n  render() {\n    const { characters } = this.state;\n    return (\n      <div>\n        <Table\n          characterData={characters}\n          removeCharacter={this.removeCharacter}\n        />\n        <Form handleSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}